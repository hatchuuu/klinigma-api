// datasource db {
//   provider = "sqlite"
//   url      = "file:./database.db"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admins {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  password     String
  phoneNumber  String
  location     String
  gender       String
  birthDate    DateTime
  refreshToken String?
  image        String
  role         String       @default("admin")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  polyclinic   Polyclinics? @relation(fields: [polyclinicId], references: [id], onDelete: Cascade)
  polyclinicId String?
}

model Users {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  phoneNumber  String
  location     String
  gender       String
  birthDate    DateTime
  refreshToken String?
  numberKTP    String    @unique
  numberKK     String
  numberBPJS   String    @unique
  imageId      String
  imageSelfie  String
  role         String    @default("user")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  queues       Queues[]
}

model Schedules {
  id           String      @id @default(cuid())
  doctor       Doctors     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId     String
  polyclinic   Polyclinics @relation(fields: [polyclinicId], references: [id], onDelete: Cascade)
  polyclinicId String
  day          String // Contoh: "senin", "selasa"
  startTime    String // Jam mulai, contoh: "08:00"
  endTime      String // Jam selesai, contoh: "16:00"
  quota        Int         @default(20)
}

model Doctors {
  id             String      @id @default(cuid())
  name           String
  email          String
  polyclinic     Polyclinics @relation(fields: [polyclinicId], references: [id], onDelete: Cascade)
  polyclinicId   String
  polyclinicName String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt
  schedules      Schedules[]
  queues         Queues[] // Relasi dengan antrean
}

model Polyclinics {
  id             String      @id @default(cuid())
  polyclinicName String      @unique
  descriptions   String
  doctors        Doctors[]
  admins         Admins[]
  queues         Queues[]
  schedules      Schedules[]
}

model Queues {
  id           String      @id @default(cuid())
  user         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  doctor       Doctors     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId     String
  polyclinic   Polyclinics @relation(fields: [polyclinicId], references: [id], onDelete: Cascade)
  polyclinicId String
  date         String      @default("20-11-2024") // Tanggal antrean 
  time         String
  queueNumber  Int
  status       String      @default("waiting")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt

  @@unique([userId, date, time]) // Membatasi user hanya bisa mendaftar sekali di waktu dan tanggal yang sama
}
